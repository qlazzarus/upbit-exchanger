name: Deploy to EC2

on:
  push:
    branches: [ "master" ]  # master push 시 배포

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # 현재 Runner IP 확인
      - name: Get GitHub Actions runner IP
        id: ip
        run: echo "IP=$(curl -s https://checkip.amazonaws.com)" >> $GITHUB_ENV

      # AWS CLI 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # SG 인바운드 추가 (22번 포트, Runner IP만 허용)
      - name: Authorize SSH in Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.EC2_SG_ID }} \
            --protocol tcp --port 22 \
            --cidr ${{ env.IP }}/32

      # .env 파일 생성 (example 복사 및 secrets overlay)
      - name: Generate .env file
        run: |
          cp .env.example .env
          # helper: set or append KEY=VALUE in .env
          set_kv() {
            local key="$1"
            local val="$2"
            if [ -z "$val" ]; then
              return 0
            fi
            if grep -qE "^${key}=" .env; then
              sed -i "s|^${key}=.*|${key}=${val}|" .env
            else
              echo "${key}=${val}" >> .env
            fi
          }

          # === overlay secrets (only if present) ===
          set_kv "APP_KEY" "${{ secrets.SECRET_APP_KEY }}"
          set_kv "APP_ENV" "production"
          set_kv "APP_DEBUG" "false"

          # Upbit
          set_kv "UPBIT_API_KEY" "${{ secrets.SECRET_UPBIT_ACCESS_KEY }}"
          set_kv "UPBIT_API_SECRET" "${{ secrets.SECRET_UPBIT_SECRET_KEY }}"
          set_kv "UPBIT_BASE_URL" "https://api.upbit.com"
          set_kv "EXCHANGE_DEFAULT" "upbit"

          # Mail
          set_kv "MAIL_HOST" "${{ secrets.SECRET_MAIL_HOST }}"
          set_kv "MAIL_USERNAME" "${{ secrets.SECRET_MAIL_USERNAME }}"
          set_kv "MAIL_PASSWORD" "${{ secrets.SECRET_MAIL_PASSWORD }}"
          set_kv "MAIL_FROM_ADDRESS" "${{ secrets.SECRET_MAIL_FROM }}"
          set_kv "REPORT_MAIL_TO" "${{ secrets.SECRET_MAIL_FROM }}"

          # Reporting
          set_kv "GSHEET_SPREADSHEET_ID" "${{ secrets.SECRET_SHEETS_SPREADSHEET_ID }}"

          # === ensure directory for service account & write file if provided ===
          mkdir -p storage/app/google
          if [ -n "${{ secrets.SECRET_GOOGLE_SA_JSON_BASE64 }}" ]; then
            echo "${{ secrets.SECRET_GOOGLE_SA_JSON_BASE64 }}" | base64 -d > storage/app/google/service-account.json
          fi

      # 압축 및 배포
      - name: Zip project
        run: zip -r release.zip . -x ".git*"

      - name: Upload and deploy to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "release.zip"
          target: "~/app"

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/app
            unzip -o release.zip -d current
            cd current
            mv .env ../.env        # .env 상위에 위치시키기
            composer install --no-dev --optimize-autoloader
            php artisan migrate --force
            sudo supervisorctl reread
            sudo supervisorctl update
            sudo supervisorctl restart all

      # SG 인바운드 규칙 제거
      - name: Revoke SSH from Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.EC2_SG_ID }} \
            --protocol tcp --port 22 \
            --cidr ${{ env.IP }}/32
